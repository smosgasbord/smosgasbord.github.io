---
// Define the testimonial interface
interface Testimonial {
  id: number;
  name: string;
  position: string;
  company: string;
  image: string;
  quote: string;
}

// Sample testimonials data
const testimonials: Testimonial[] = [
  {
    id: 1,
    name: "Sarah Johnson",
    position: "CEO",
    company: "TechInnovate",
    image: "/placeholder.svg?height=80&width=80",
    quote: "The consulting services provided by this team transformed our business operations. Their strategic insights helped us increase efficiency by 40% within just three months."
  },
  {
    id: 2,
    name: "Michael Chen",
    position: "CTO",
    company: "DataSphere",
    image: "/placeholder.svg?height=80&width=80",
    quote: "Working with this consulting firm was a game-changer for our technical infrastructure. Their expertise in cloud migration saved us countless hours and resources."
  },
  {
    id: 3,
    name: "Emily Rodriguez",
    position: "Operations Director",
    company: "GlobalSolutions",
    image: "/placeholder.svg?height=80&width=80",
    quote: "I was impressed by their thorough approach to our supply chain challenges. The solutions they implemented resulted in a 25% reduction in operational costs."
  },
  {
    id: 4,
    name: "David Williams",
    position: "Marketing VP",
    company: "BrandForward",
    image: "/placeholder.svg?height=80&width=80",
    quote: "Their market analysis was spot-on. The insights provided helped us pivot our strategy and capture a new market segment we hadn't previously considered."
  }
];
---

<div class="testimonial-slideshow relative overflow-hidden bg-white py-12 px-4 sm:px-6 lg:px-8 rounded-lg shadow-lg max-w-6xl mx-auto my-12">
  <div class="absolute top-0 left-0 w-full h-20 bg-gradient-to-b from-primary/10 to-transparent"></div>
  <div class="absolute bottom-0 left-0 w-full h-20 bg-gradient-to-t from-primary/10 to-transparent"></div>
  
  <h2 class="text-3xl font-bold text-center text-gray-900 mb-8">What Our Clients Say</h2>
  
  <div class="testimonial-container relative h-[300px] sm:h-[250px]">
    {testimonials.map((testimonial, index) => (
      <div 
        class="testimonial-slide absolute top-0 left-0 w-full opacity-0 transition-all duration-500 ease-in-out"
        data-index={index}
      >
        <div class="flex flex-col items-center text-center px-4">
          <div class="mb-6">
            <img 
              src={testimonial.image || "/placeholder.svg"} 
              alt={`${testimonial.name} profile picture`} 
              class="w-20 h-20 rounded-full object-cover border-4 border-primary/20"
            />
          </div>
          <blockquote class="text-lg italic text-gray-700 mb-4">"{testimonial.quote}"</blockquote>
          <div class="font-semibold text-gray-900">{testimonial.name}</div>
          <div class="text-sm text-gray-600">{testimonial.position}, {testimonial.company}</div>
        </div>
      </div>
    ))}
  </div>
  
  <div class="flex justify-center mt-8 space-x-2">
    {testimonials.map((_, index) => (
      <button 
        class="testimonial-indicator w-3 h-3 rounded-full bg-gray-300 transition-all duration-300 hover:bg-primary/70 focus:outline-none focus:ring-2 focus:ring-primary/50"
        data-index={index}
        aria-label={`Go to testimonial ${index + 1}`}
      ></button>
    ))}
  </div>
  
  <div class="flex justify-between mt-8">
    <button 
      id="prev-testimonial" 
      class="bg-white text-primary hover:bg-primary/10 p-2 rounded-full shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary/50"
      aria-label="Previous testimonial"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <button 
      id="next-testimonial" 
      class="bg-white text-primary hover:bg-primary/10 p-2 rounded-full shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary/50"
      aria-label="Next testimonial"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>
</div>

<script>
  // Initialize the slideshow
  let currentSlide = 0;
  const slides = document.querySelectorAll('.testimonial-slide');
  const indicators = document.querySelectorAll('.testimonial-indicator');
  const totalSlides = slides.length;
  let slideInterval: number;

  // Function to show a specific slide
  function showSlide(index: number) {
    // Hide all slides
    slides.forEach((slide) => {
      slide.classList.remove('opacity-100', 'z-10');
      slide.classList.add('opacity-0', 'z-0');
    });
    
    // Update indicators
    indicators.forEach((indicator) => {
      indicator.classList.remove('bg-primary', 'w-6');
      indicator.classList.add('bg-gray-300', 'w-3');
    });
    
    // Show the current slide
    slides[index].classList.remove('opacity-0', 'z-0');
    slides[index].classList.add('opacity-100', 'z-10');
    
    // Update the current indicator
    indicators[index].classList.remove('bg-gray-300', 'w-3');
    indicators[index].classList.add('bg-primary', 'w-6');
    
    // Update current slide index
    currentSlide = index;
  }

  // Function to go to the next slide
  function nextSlide() {
    const newIndex = (currentSlide + 1) % totalSlides;
    showSlide(newIndex);
  }

  // Function to go to the previous slide
  function prevSlide() {
    const newIndex = (currentSlide - 1 + totalSlides) % totalSlides;
    showSlide(newIndex);
  }

  // Set up event listeners
  document.getElementById('next-testimonial')?.addEventListener('click', () => {
    clearInterval(slideInterval);
    nextSlide();
    startSlideshow();
  });

  document.getElementById('prev-testimonial')?.addEventListener('click', () => {
    clearInterval(slideInterval);
    prevSlide();
    startSlideshow();
  });

  // Set up indicator clicks
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      clearInterval(slideInterval);
      showSlide(index);
      startSlideshow();
    });
  });

  // Function to start the automatic slideshow
  function startSlideshow() {
    slideInterval = setInterval(nextSlide, 5000); // Change slide every 5 seconds
  }

  // Initialize the slideshow
  function initSlideshow() {
    showSlide(0);
    startSlideshow();

    // Pause slideshow when user hovers over it
    const slideshowContainer = document.querySelector('.testimonial-slideshow');
    slideshowContainer?.addEventListener('mouseenter', () => {
      clearInterval(slideInterval);
    });
    
    slideshowContainer?.addEventListener('mouseleave', () => {
      startSlideshow();
    });
  }

  // Initialize when the DOM is loaded
  document.addEventListener('DOMContentLoaded', initSlideshow);

  // Clean up on page unload
  window.addEventListener('beforeunload', () => {
    clearInterval(slideInterval);
  });
</script>

<style>
  .testimonial-slide {
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
  }
  
  .testimonial-slide.opacity-100 {
    transform: translateX(0);
  }
  
  .testimonial-slide.opacity-0 {
    transform: translateX(20px);
  }
</style>

